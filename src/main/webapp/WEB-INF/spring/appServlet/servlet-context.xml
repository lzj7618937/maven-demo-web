<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:task="http://www.springframework.org/schema/task"
             xmlns:p="http://www.springframework.org/schema/p"
             xsi:schemaLocation="
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- DispatcherServlet Context: defines this servlet's request-processing
        infrastructure -->

    <!-- **************************************************************** -->
    <!-- CONVERSION SERVICE -->
    <!-- Standard Spring formatting-enabled implementation -->
    <!-- **************************************************************** -->
    <!-- Only needed because we install custom converters to support the examples
        in the org.springframewok.samples.mvc.convert package -->
    <beans:bean id="conversionService"
                class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <beans:property name="formatters">
            <beans:set>
                <beans:bean
                        class="org.springframework.samples.mvc.convert.MaskFormatAnnotationFormatterFactory"/>
                <!-- beans:bean class="thymeleafexamples.stsm.web.conversion.VarietyFormatter" /> -->
                <!-- beans:bean class="thymeleafexamples.stsm.web.conversion.DateFormatter" /> -->
            </beans:set>
        </beans:property>
    </beans:bean>

    <!-- Enables the Spring MVC @Controller programming model -->
    <!-- **************************************************************** -->
    <!-- SPRING ANNOTATION PROCESSING -->
    <!-- 会自动注册了validator ConversionService -->
    <!-- **************************************************************** -->
    <annotation-driven conversion-service="conversionService"
                       validator="validator" enable-matrix-variables="true">
        <argument-resolvers>
            <beans:bean
                    class="org.springframework.samples.mvc.data.custom.CustomArgumentResolver"/>
        </argument-resolvers>
        <async-support default-timeout="3000">
            <callable-interceptors>
                <beans:bean
                        class="org.springframework.samples.mvc.async.TimeoutCallableProcessingInterceptor"/>
            </callable-interceptors>
        </async-support>
    </annotation-driven>

    <!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
    <beans:bean id="validator"
                class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <beans:property name="providerClass"
                        value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <beans:property name="validationMessageSource" ref="messageSource"/>
    </beans:bean>

    <!-- Handles HTTP GET requests for /resources/** by efficiently serving
        up static resources in the ${webappRoot}/resources/ directory -->
    <resources mapping="/public/**" location="public"/>

    <!-- 错误路径和错误页面，注意指定viewResolver -->
    <view-controller path="/404" view-name="/go404"/>
    <view-controller path="/500" view-name="/go500"/>

    <!-- 对返回类型做JSON转换，可参考 ：http://json20080301.iteye.com/blog/1881191 -->
    <annotation-driven>
        <message-converters register-defaults="true">
            <beans:bean
                    class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"
                    p:supportedMediaTypes="application/json;charset=UTF-8">
                <beans:property name="objectMapper">
                    <beans:bean class="com.maven.demo.web.filter.ObjectMappingCustomer"/>
                </beans:property>
            </beans:bean>
        </message-converters>
    </annotation-driven>

    <interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <beans:bean class="com.maven.demo.web.interceptor.HandlerUserInterceptor"/>
    </interceptors>

    <!-- Only needed because we require fileupload in the org.springframework.samples.mvc.fileupload
        package -->
    <beans:bean id="multipartResolver"
                class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

    <!-- Imports user-defined @Controller beans that process client requests -->
    <beans:import resource="spring-thymeleaf.xml"/>
    <!-- beans:import resource="spring-mvc.xml" />-->
    <beans:import resource="spring-hibernate.xml"/>
    <beans:import resource="controllers.xml"/>

    <!-- 默认的注解映射的支持 -->
    <task:annotation-driven/>

</beans:beans>
